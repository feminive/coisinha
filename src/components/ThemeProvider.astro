---
---

<script>
  class ThemeManager {
    constructor() {
      this.initializeThemes();
      this.setupEventListeners();
    }

    initializeThemes() {
      // Get initial themes from localStorage or defaults
      const theme = localStorage.getItem('theme') || 'light';
      const colorTheme = localStorage.getItem('color-theme') || 'default';

      // Apply themes immediately
      this.applyTheme(theme);
      this.applyColorTheme(colorTheme);

      // Make themes available globally
      window.themeManager = this;
    }

    applyTheme(theme) {
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
      localStorage.setItem('theme', theme);
    }

    applyColorTheme(colorTheme) {
      document.documentElement.classList.remove('theme-purple', 'theme-green', 'theme-red');
      if (colorTheme !== 'default') {
        document.documentElement.classList.add(`theme-${colorTheme}`);
      }
      localStorage.setItem('color-theme', colorTheme);
    }

    toggleTheme() {
      const currentTheme = localStorage.getItem('theme') || 'light';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      this.applyTheme(newTheme);
    }

    setColorTheme(theme) {
      this.applyColorTheme(theme);
    }

    setupEventListeners() {
      document.addEventListener('astro:after-swap', () => {
        // Reapply themes after page transitions
        const currentTheme = localStorage.getItem('theme') || 'light';
        const currentColorTheme = localStorage.getItem('color-theme') || 'default';
        this.applyTheme(currentTheme);
        this.applyColorTheme(currentColorTheme);
      });
    }
  }

  // Initialize theme manager when the script loads
  new ThemeManager();
</script>