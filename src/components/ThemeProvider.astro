<script>
  // Initialize theme from localStorage or system preference
  const getInitialTheme = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  };

  const getInitialColorTheme = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('color-theme')) {
      return localStorage.getItem('color-theme');
    }
    return 'default'; // blue is default
  };

  // Function to apply theme
  const applyTheme = (theme) => {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  };

  // Function to apply color theme
  const applyColorTheme = (colorTheme) => {
    document.documentElement.classList.remove('theme-purple', 'theme-green', 'theme-red');
    if (colorTheme !== 'default') {
      document.documentElement.classList.add(`theme-${colorTheme}`);
    }
  };

  // Initialize themes
  const theme = getInitialTheme();
  const colorTheme = getInitialColorTheme();

  // Apply themes immediately
  applyTheme(theme);
  applyColorTheme(colorTheme);

  // Make theme data available to other scripts
  window.theme = { 
    current: theme,
    colorTheme: colorTheme,
    setTheme: (value) => {
      localStorage.setItem('theme', value);
      applyTheme(value);
      window.theme.current = value;
    },
    setColorTheme: (value) => {
      localStorage.setItem('color-theme', value);
      applyColorTheme(value);
      window.theme.colorTheme = value;
    }
  };

  // Handle theme changes during navigation
  document.addEventListener('astro:after-swap', () => {
    const currentTheme = localStorage.getItem('theme') || theme;
    const currentColorTheme = localStorage.getItem('color-theme') || colorTheme;
    
    applyTheme(currentTheme);
    applyColorTheme(currentColorTheme);
  });
</script>