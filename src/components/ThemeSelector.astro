<div class="relative inline-block">
  <button
    id="theme-selector-button"
    class="flex items-center gap-2 p-2 text-gray-700 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
    aria-expanded="false"
    aria-controls="theme-selector-dropdown"
  >
    <span class="w-4 h-4 rounded-full bg-primary-500 shadow-sm"></span>
    <span class="sr-only">Select color theme</span>
  </button>

  <div
    id="theme-selector-dropdown"
    class="absolute right-0 mt-2 w-36 bg-white dark:bg-gray-900 shadow-lg rounded-lg p-2 hidden z-10 border border-gray-200 dark:border-gray-800"
  >
    <ul class="space-y-1">
      <li>
        <button 
          class="w-full text-left px-3 py-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center gap-2 theme-option"
          data-theme="default"
        >
          <span class="w-4 h-4 rounded-full bg-blue-500"></span>
          <span>Blue</span>
        </button>
      </li>
      <li>
        <button 
          class="w-full text-left px-3 py-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center gap-2 theme-option"
          data-theme="purple"
        >
          <span class="w-4 h-4 rounded-full bg-purple-500"></span>
          <span>Purple</span>
        </button>
      </li>
      <li>
        <button 
          class="w-full text-left px-3 py-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center gap-2 theme-option"
          data-theme="green"
        >
          <span class="w-4 h-4 rounded-full bg-green-500"></span>
          <span>Green</span>
        </button>
      </li>
      <li>
        <button 
          class="w-full text-left px-3 py-2 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 flex items-center gap-2 theme-option"
          data-theme="red"
        >
          <span class="w-4 h-4 rounded-full bg-red-500"></span>
          <span>Red</span>
        </button>
      </li>
    </ul>
  </div>
</div>

<script>
  const button = document.getElementById('theme-selector-button');
  const dropdown = document.getElementById('theme-selector-dropdown');
  const options = document.querySelectorAll('.theme-option');

  // Update theme indicator
  const updateThemeIndicator = () => {
    const indicator = button?.querySelector('span');
    if (indicator) {
      if (window.theme.colorTheme === 'default') {
        indicator.className = 'w-4 h-4 rounded-full bg-blue-500 shadow-sm';
      } else if (window.theme.colorTheme === 'purple') {
        indicator.className = 'w-4 h-4 rounded-full bg-purple-500 shadow-sm';
      } else if (window.theme.colorTheme === 'green') {
        indicator.className = 'w-4 h-4 rounded-full bg-green-500 shadow-sm';
      } else if (window.theme.colorTheme === 'red') {
        indicator.className = 'w-4 h-4 rounded-full bg-red-500 shadow-sm';
      }
    }
  };

  // Show/hide dropdown
  button?.addEventListener('click', () => {
    const expanded = button.getAttribute('aria-expanded') === 'true';
    button.setAttribute('aria-expanded', expanded ? 'false' : 'true');
    dropdown?.classList.toggle('hidden');
  });

  // Handle option clicks
  options.forEach(option => {
    option.addEventListener('click', () => {
      const theme = option.getAttribute('data-theme');
      if (theme) {
        window.theme.setColorTheme(theme);
        updateThemeIndicator();
        dropdown?.classList.add('hidden');
        button?.setAttribute('aria-expanded', 'false');
      }
    });
  });

  // Close on outside click
  document.addEventListener('click', (event) => {
    if (button && dropdown && !button.contains(event.target) && !dropdown.contains(event.target)) {
      dropdown.classList.add('hidden');
      button.setAttribute('aria-expanded', 'false');
    }
  });

  // Initial theme indicator update
  updateThemeIndicator();
</script>