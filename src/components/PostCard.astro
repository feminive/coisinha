---
import { formatDistance } from 'date-fns';

interface Props {
  post: {
    slug: string;
    data: {
      title: string;
      description: string;
      published: Date;
      updatedDate?: Date;
      image?: string;
      category?: string;
      tags?: string[];
      readingTime?: string;
    };
  };
  featured?: boolean;
}

const { post, featured = false } = Astro.props;
const formattedDate = formatDistance(
  new Date(post.data.published),
  new Date(),
  { addSuffix: true }
);

const defaultImage = "https://images.pexels.com/photos/3178818/pexels-photo-3178818.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2";
const image = post.data.image || defaultImage;
---

<article class={`overflow-hidden ${featured ? 'lg:flex gap-8 items-center' : ''} group`}>
  <a 
    href={`/blog/${post.slug}/`} 
    class={`block ${featured ? 'lg:w-1/2' : ''} overflow-hidden rounded-xl mb-4`}
  >
    <div class="overflow-hidden rounded-xl">
      <img 
        src={image} 
        alt={post.data.title} 
        class="h-64 w-full object-cover transition-all duration-300 group-hover:scale-105"
        width="800"
        height="400"
      />
    </div>
  </a>
  
  <div class={`${featured ? 'lg:w-1/2' : ''}`}>
    <div class="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400 mb-2">
      <span>{formattedDate}</span>
      <span class="w-1 h-1 rounded-full bg-gray-400 dark:bg-gray-600"></span>
      <span>{post.data.readingTime}</span>
      
      {post.data.category && (
        <>
          <span class="w-1 h-1 rounded-full bg-gray-400 dark:bg-gray-600"></span>
          <a 
            href={`/categories/${post.data.category.toLowerCase()}`} 
            class="text-primary-600 dark:text-primary-400 hover:underline"
          >
            {post.data.category}
          </a>
        </>
      )}
    </div>
    
    <h2 class={`font-bold ${featured ? 'text-2xl md:text-3xl' : 'text-xl'} mb-2 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors duration-300`}>
      <a href={`/blog/${post.slug}/`}>
        {post.data.title}
      </a>
    </h2>
    
    <p class="text-gray-700 dark:text-gray-300 mb-4 line-clamp-3">
      {post.data.description}
    </p>
    
    {post.data.tags && (
      <div class="flex flex-wrap gap-2">
        {post.data.tags.map((tag: string) => (
          <a 
            href={`/tags/${tag.toLowerCase()}`}
            class="text-xs px-3 py-1 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full hover:bg-primary-100 dark:hover:bg-primary-900 transition-colors duration-300"
          >
            #{tag}
          </a>
        ))}
      </div>
    )}
  </div>
</article>