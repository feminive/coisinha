---
import { getCollection } from 'astro:content';
import readingTime from 'reading-time';
import BlogPost from '../../layouts/BlogPost.astro';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog', ({ data }) => {
    return !data.draft;
  });
  
  const sortedEntries = blogEntries.sort((a, b) => 
    b.data.published.valueOf() - a.data.published.valueOf()
  );
  
  return sortedEntries.map((entry, index) => {
    const categoryPosts = sortedEntries.filter(post => 
      post.data.category === entry.data.category
    );
    
    const currentIndex = categoryPosts.findIndex(post => post.slug === entry.slug);
    
    const prevPost = currentIndex < categoryPosts.length - 1 ? categoryPosts[currentIndex + 1] : undefined;
    const nextPost = currentIndex > 0 ? categoryPosts[currentIndex - 1] : undefined;
    
    const otherPosts = sortedEntries
      .filter(post => 
        post.slug !== entry.slug && 
        (post.data.category === entry.data.category || 
         (post.data.tags && entry.data.tags && 
          post.data.tags.some(tag => entry.data.tags.includes(tag))))
      )
      .sort(() => Math.random() - 0.5)
      .slice(0, 2);
    
    return {
      params: { slug: entry.slug },
      props: { 
        entry,
        prevPost,
        nextPost,
        otherPosts
      },
    };
  });
}

const { entry, prevPost, nextPost, otherPosts } = Astro.props;
const { Content } = await entry.render();

const stats = readingTime(entry.body);
---

<BlogPost 
  {...entry.data} 
  readingTime={stats.text} 
  otherPosts={otherPosts}
  prevPost={prevPost}
  nextPost={nextPost}
  content={entry.body}
>
  <Content />
</BlogPost>