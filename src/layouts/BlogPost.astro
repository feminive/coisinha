---
import { formatDistance } from 'date-fns';
import Layout from './Layout.astro';
import type { CollectionEntry } from 'astro:content';

type Props = CollectionEntry<'blog'>['data'] & {
  readingTime: string;
  otherPosts?: CollectionEntry<'blog'>[];
  prevPost?: CollectionEntry<'blog'>;
  nextPost?: CollectionEntry<'blog'>;
};

const { 
  title, 
  description, 
  published, 
  updatedDate, 
  image, 
  category, 
  tags,
  readingTime,
  otherPosts = [],
  prevPost,
  nextPost
} = Astro.props;

const formattedDate = formatDistance(
  new Date(published),
  new Date(),
  { addSuffix: true }
);
const formattedUpdatedDate = updatedDate ? formatDistance(
  new Date(updatedDate),
  new Date(),
  { addSuffix: true }
) : null;

const defaultImage = "https://images.pexels.com/photos/3178818/pexels-photo-3178818.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2";
const Heroimage = image || defaultImage;
---

<Layout title={title} description={description} image={image}>
  <!-- Barra de progresso de leitura -->
  <div id="reading-progress-container" class="fixed top-0 left-0 w-full h-1 bg-gray-200 dark:bg-gray-800 z-50">
    <div id="reading-progress-bar" class="h-full bg-primary-600 dark:bg-primary-400 w-0 transition-all duration-100"></div>
  </div>

  <!-- Botão voltar ao topo -->
  <button 
    id="back-to-top" 
    class="fixed bottom-6 right-6 bg-primary-600 dark:bg-primary-800 text-white p-3 rounded-full shadow-lg opacity-0 invisible transition-all duration-300 z-40 hover:bg-primary-700 dark:hover:bg-primary-700 focus:outline-none"
    aria-label="Voltar ao topo"
  >
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
    </svg>
  </button>

  <article class="mx-auto max-w-3xl">
    <div class="mb-8">
      {category && (
        <a
          href={`/categories/${category.toLowerCase()}`}
          class="inline-block text-primary-600 dark:text-primary-400 hover:underline mb-2"
        >
          {category}
        </a>
      )}
      
      <h1 class="text-3xl md:text-4xl font-bold mb-4 leading-tight">
        {title}
      </h1>
      
      <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mb-6">
        <div class="flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <span>Publicado em {formattedDate}</span>
        </div>
        
        {updatedDate && (
          <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            <span>Modificado em {formattedUpdatedDate}</span>
          </div>
        )}
        
        <div class="flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span>{readingTime}</span>
        </div>
      </div>
      
      {image && (
        <img 
          src={Heroimage} 
          alt={title} 
          class="w-full h-64 sm:h-96 object-cover rounded-xl mb-8"
          width="1200"
          height="600"
        />
      )}
    </div>
    
    <div class="post-content prose prose-lg dark:prose-invert">
      <slot />
    </div>
    
    {(prevPost || nextPost) && (
      <nav class="flex justify-between items-center mt-12 pt-8 border-t border-gray-200 dark:border-gray-800">
        {prevPost ? (
          <a href={`/blog/${prevPost.slug}/`} class="group flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 text-gray-600 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
            <div>
              <span class="block text-sm text-gray-600 dark:text-gray-400">Previous Post</span>
              <span class="block font-medium group-hover:text-primary-600 dark:group-hover:text-primary-400">{prevPost.data.title}</span>
            </div>
          </a>
        ) : <div></div>}
        
        {nextPost ? (
          <a href={`/blog/${nextPost.slug}/`} class="group flex items-center text-right">
            <div>
              <span class="block text-sm text-gray-600 dark:text-gray-400">Next Post</span>
              <span class="block font-medium group-hover:text-primary-600 dark:group-hover:text-primary-400">{nextPost.data.title}</span>
            </div>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2 text-gray-600 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </a>
        ) : <div></div>}
      </nav>
    )}
    
    {tags && tags.length > 0 && (
      <div class="mt-10 pt-8 border-t border-gray-200 dark:border-gray-800">
        <h3 class="text-lg font-semibold mb-4">Tags</h3>
        <div class="flex flex-wrap gap-2">
          {tags.map((tag: string) => (
            <a 
              href={`/tags/${tag.toLowerCase()}`}
              class="text-sm px-4 py-2 bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-full hover:bg-primary-100 dark:hover:bg-primary-900 transition-colors duration-300"
            >
              #{tag}
            </a>
          ))}
        </div>
      </div>
    )}
    
    {otherPosts.length > 0 && (
      <div class="mt-16">
        <h3 class="text-xl font-bold mb-6">You might also like</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {otherPosts.slice(0, 2).map(post => (
            <div class="group">
              <a href={`/blog/${post.slug}/`} class="block overflow-hidden rounded-lg mb-3">
                <img 
                  src={post.data.image || defaultImage} 
                  alt={post.data.title} 
                  class="h-48 w-full object-cover transition-all duration-300 group-hover:scale-105"
                  width="400"
                  height="200"
                />
              </a>
              <h4 class="font-medium mb-1 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors">
                <a href={`/blog/${post.slug}/`}>{post.data.title}</a>
              </h4>
              <p class="text-sm text-gray-600 dark:text-gray-400 line-clamp-2">
                {post.data.description}
              </p>
            </div>
          ))}
        </div>
      </div>
    )}
  </article>

  <script>
    // Função para atualizar a barra de progresso de leitura
    function updateReadingProgress() {
      const article = document.querySelector('article');
      if (!article) return;
      
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight - windowHeight;
      const scrollTop = window.scrollY;
      
      // Calcula a porcentagem de rolagem
      const scrollPercentage = (scrollTop / documentHeight) * 100;
      
      // Atualiza a largura da barra de progresso
      const progressBar = document.getElementById('reading-progress-bar');
      if (progressBar) {
        progressBar.style.width = `${Math.min(scrollPercentage, 100)}%`;
      }
      
      // Mostra ou esconde o botão de voltar ao topo
      const backToTopButton = document.getElementById('back-to-top');
      if (backToTopButton) {
        if (scrollTop > 300) {
          backToTopButton.classList.remove('opacity-0', 'invisible');
          backToTopButton.classList.add('opacity-100', 'visible');
        } else {
          backToTopButton.classList.remove('opacity-100', 'visible');
          backToTopButton.classList.add('opacity-0', 'invisible');
        }
      }
    }
    
    // Função para rolar para o topo da página
    function scrollToTop() {
      window.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    }
    
    // Adiciona os event listeners quando o DOM estiver carregado
    document.addEventListener('DOMContentLoaded', () => {
      // Atualiza a barra de progresso quando a página carrega
      updateReadingProgress();
      
      // Atualiza a barra de progresso durante a rolagem
      window.addEventListener('scroll', updateReadingProgress);
      
      // Configura o botão de voltar ao topo
      const backToTopButton = document.getElementById('back-to-top');
      if (backToTopButton) {
        backToTopButton.addEventListener('click', scrollToTop);
      }
    });
  </script>
</Layout>